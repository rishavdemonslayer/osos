%euler
function [x,y] = EulerODE(x0, xn, y0, h, f)
x=x0:h:xn;
n=length(x)-1;
y=zeros(1,n+1);
y(1) = y0;
for j=1:n
 y(j+1) = y(j) + h*f(x(j), y(j));
end
end

%mod euler

function [x,y] = modEulerODE(x0, xn, y0, h, f)
x=x0:h:xn;
n=length(x)-1;
y=zeros(1,n+1);
y(1) = y0;
for j=1:n
 yp = y(j) + h*f(x(j), y(j));
 y(j+1) = y(j) + 0.5*h*( f(x(j), y(j)) + f(x(j+1), yp));
end
end

%runge kutta method

function [x,y]=RK4ODE(x0,xn, y0,h,f )
x = x0:h:xn;
n = length(x)-1;
y = zeros(1,n+1);
y(1) = y0;
for i=1:n
 K1 = h*f(x(i),y(i));
 K2 = h*f(x(i)+0.5*h,y(i)+0.5*K1);
 K3 = h*f(x(i)+0.5*h,y(i)+0.5*K2);
 K4 = h*f(x(i)+h,y(i)+K3);
 y(i+1) = y(i)+(1/6)*(K1+2*K2+2*K3+K4);
end
end

%milne method

function [x,y]=MilneODE(x0,xn, y0,h,f )
x=x0:h:xn;
n=length(x)-1;
y = zeros(1,n+1);
y(1)=y0;
for i=1:3
 K1=h*f(x(i),y(i));
 K2=h*f(x(i)+0.5*h,y(i)+0.5*K1);
 K3=h*f(x(i)+0.5*h,y(i)+0.5*K2);
 K4=h*f(x(i)+h,y(i)+K3);
 y(i+1)=y(i)+(1/6)*(K1+2*K2+2*K3+K4);
end
for i=4:n 
 y(i+1)=y(i-3)+(4*h/3)*(2*f(x(i),y(i)) - f(x(i-1),y(i-1))+2*f(x(i-2),y(i2))); %predictor formula
 y(i+1)=y(i-1)+(h/3)*(f(x(i+1),y(i+1)) + 4*f(x(i),y(i)) + f(x(i-1),y(i-1))); 
% Corrector formula
end




x0=0; xn = 1; y0=0.5; h=0.1; f = @(x,y) y-x^2+1; % Change according to the 
problem.
% Uncomment any one of the below line to the output for the given problem.
%[x,y] = EulerODE(x0, xn, y0, h, f);
[x,y] = modEulerODE(x0, xn, y0, h, f);
%[x,y] = RK4ODE(x0, xn, y0, h, f);
%[x,y] = MilneODE(x0, xn, y0, h, f);
% Display the values of x and y using 'disp' or 'fprintf'
fprintf('Approximate solution of the ODE is\n');
disp([x;y]);
ye=eval(dsolve('Dy=y-x^2+1','y(0)=0.5','x'));% Change according to the problem
plot(x,y,'*',x,ye,'r');